const debug = require("debug")("server:server");
const dotenv = require("dotenv");
const mongoose = require('mongoose');
const app = require('../index.js')
dotenv.config();



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */



// Connect MongoDB at default port 27017.

mongoose.Promise = global.Promise;
mongoose
  .connect('mongodb://127.0.0.1:27017/nodejs_learning')
  .then(() => {
    app.listen(port)
    app.on("error", onError);
    app.on("listening", onListening);
    console.log("MongoDB connected");
  })
  .catch((error) => {
    console.log(process.env.MONGODB_URL)
    console.log(error);
    process.exit(1);
  });

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if(error.syscall != 'listen')
    throw error;
  const bind = typeof port === "string" ? "pipe " + port : "port " +port;
  switch (error.code) {
    case "EACESS":
        console.error(bind + "requires elevated privileges")
        process.exit(1);
        break;
    case "EADDRINUSE":
        console.error(bind + "is already in use")
        process.exit(1)
        break;
    default:
      throw error;
      
  }
};

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const address = server.address();
  const bind = typeof port === "string" ? "pipe" + port : "port " + port;
  debug("listening on " + bind);
}



